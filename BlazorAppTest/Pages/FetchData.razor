@page "/fetchdata"
@inject GrpcChannel Channel
@using Grpc.Core
@using Google.Protobuf.WellKnownTypes
@using System.Threading;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (alarms == null)
{
<p><em>Loading...</em></p> }
else
{
<table class="table">
    <thead>
        <tr>
            <th>Descrizione</th>
            <th>Data Inizio</th>
            <th>Id</th>
            <th>Flag</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var alarm in alarms)
        {@*<tr oncontextmenu="return false;" @onclick="HandleClick" @onmouseup="HandleMouseUp">
                <td>@alarm.Description</td>
                <td>@alarm.StartDate.ToString()</td>
                <td>@alarm.Id</td>
                <td>@alarm.Flag</td>
            </tr>*@
        <ContextMenuTrigger MenuId="myMenu">
            <tr>
                <td>@alarm.Description</td>
                <td>@alarm.StartDate.ToString()</td>
                <td>@alarm.Id</td>
                <td>@alarm.Flag</td>
            </tr>
        </ContextMenuTrigger>}
    </tbody>
</table>
<ContextMenuTrigger MenuId="myMenu">
    <p>Right-click on me to show the context menu !!</p>
</ContextMenuTrigger>
<ContextMenu Id="myMenu">
    <Item >Item 1</Item>
    <Item >Item 2</Item>
    <Item  Enabled="false">Item 3 (disabled)</Item>
    <Seperator />
    <Item>
        Submenu
        <SubMenu>
            <Item >Submenu Item 1</Item>
            <Item >Submenu Item 2</Item>
        </SubMenu>
    </Item>
</ContextMenu>
}

@code { 
    private List<AlarmProto> alarms = new List<AlarmProto>();

    protected override async Task OnInitializedAsync()
    {
        var client = new Alarmer.AlarmerClient(Channel);
        var cts = new CancellationTokenSource(TimeSpan.FromSeconds(180));
        using (var stream = client.GetAlarmStream(new Empty()))
        {
            while (await stream.ResponseStream.MoveNext(cancellationToken: cts.Token))
            {
                Console.WriteLine("Aggiunto: " + stream.ResponseStream.Current);
                alarms.Add(stream?.ResponseStream?.Current);
                StateHasChanged();
            }
        }
    }

    void HandleClick(MouseEventArgs args)
    {
        Console.WriteLine("This is a left click");
    }

    void HandleMouseUp(MouseEventArgs args)
    {
        if (args.Button == 2)
            Console.WriteLine("This is a right click");
    }

    //void OnClick(ItemClickEventArgs e)
    //{
    //    //Console.WriteLine($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    //    Console.WriteLine("Dsdas");
    //}
    }
